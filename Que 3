Fetch data from the JSON placeholder API and display it in the browser. Also, implement the skeleton loader which will be displayed when the data is getting fetched. (No library should be used for implementing
the skeleton loader)

HTML
<!DOCTYPE html>
<html>
<head>
  <title>Data Fetching with Skeleton Loader</title>
  <link rel="stylesheet" href="three.css">
</head>
<body>
  <div id="posts"></div>
  
  <script src="three.js"></script>
</body>
</html>

CSS
.skeleton {
    background-color: #f2f2f2;
    animation: skeleton-animation 1s infinite alternate;
  }
  
  @keyframes skeleton-animation {
    0% { opacity: 0.6; }
    100% { opacity: 1; }
  }
  
  .post {
    margin-bottom: 10px;
    padding: 10px;
    background-color: #f9f9f9;
  }

JS
const postsContainer = document.getElementById('posts');

function createSkeleton() {
  const skeleton = document.createElement('div');
  skeleton.classList.add('skeleton');
  skeleton.style.height = '20px';
  return skeleton;
}

function createPostElement(post) {
  const postElement = document.createElement('div');
  postElement.classList.add('post');
  postElement.innerHTML = `
    <h2>${post.title}</h2>
    <p>${post.body}</p>
  `;
  return postElement;
}

function displayPosts(posts) {
  postsContainer.innerHTML = '';
  posts.forEach(post => {
    const postElement = createPostElement(post);
    postsContainer.appendChild(postElement);
  });
}

function fetchPosts() {
  postsContainer.innerHTML = '';
  for (let i = 0; i < 5; i++) {
    const skeleton = createSkeleton();
    postsContainer.appendChild(skeleton);
  }

  fetch('https://jsonplaceholder.typicode.com/posts')
    .then(response => response.json())
    .then(posts => {
      setTimeout(() => {
        displayPosts(posts);
      }, 1000);
    })
    .catch(error => {
      console.error('Error fetching posts:', error);
      postsContainer.innerHTML = '<p>Error fetching posts. Please try again later.</p>';
    });
}

fetchPosts();
